"use strict";(self.webpackChunksmart_react_components_page=self.webpackChunksmart_react_components_page||[]).push([[988],{69988:(e,t,n)=>{n.r(t),n.d(t,{default:()=>se});var a=n(67294),i=n(94086),o=n(16127),r=n(23235),s=n(69229),l=n(666),c=n(81871),m=n.n(c),d=n(8663),u=n.n(d),p=n(61033),h=n.n(p),f=n(50959),y=n.n(f),E=n(498),g=n.n(E),b=n(52662),v=n.n(b),w=n(31054),S=n.n(w),C=n(68148),k=n.n(C),T=n(65509),B=n.n(T),D=n(12788),Z=n(6847),F=n(44583),A=n(26617),x=n(40074);const R=D.createGlobalStyle`
  .fade-show {
    opacity: 0;
  }

  .fade-show-active {
    opacity: 1;
    transition: opacity 400ms ease-in-out;
  }

  .fade-hide {
    opacity: 1;
  }

  .fade-hide-active {
    opacity: 0;
    transition: opacity 400ms ease-in-out;
  }

  .fade2-show-active {
    animation: fade 450ms 0s 1 normal ease-in-out;
  }

  .fade2-hide-active {
    animation: fade 450ms 0s 1 reverse ease-in-out;
  }

  @keyframes fade {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
`,P=()=>{const[e,t]=a.useState(!1);return a.createElement(a.Fragment,null,a.createElement(R,null),a.createElement(h(),{onClick:()=>t(!e)},"Toggle"),a.createElement(u(),{className:"fade",duration:400,status:e},a.createElement(m(),{alignItems:"center",background:"!success",borderRadius:4,color:"!success.font",display:"flex",height:200,justifyContent:"center",marginTop:"$length.3",width:200},"Box Element")))},G=()=>{const[e,t]=a.useState(!1);return a.createElement(a.Fragment,null,a.createElement(R,null),a.createElement(h(),{onClick:()=>t(!e)},"Toggle"),a.createElement(u(),{className:"fade2",duration:400,status:e},a.createElement(m(),{alignItems:"center",background:"!danger",borderRadius:4,color:"!danger.font",display:"flex",height:200,justifyContent:"center",marginTop:"$length.3",width:200},"Box Element")))},q=()=>a.createElement(a.Fragment,null,a.createElement("h2",{id:"css-transition"},"CSS Transition"),a.createElement(Z.Z,null),a.createElement("p",null,"CSS Transition uses CSS classes to display transitions."),a.createElement("h3",null,"Props"),a.createElement(x.Z,{props:[{name:"children",type:"JSX.Element",isRequired:!0,description:"Component to be animated."},{name:"status",type:"boolean",isRequired:!0,description:"Component display status."},{name:"className",type:"string",isRequired:!0,description:a.createElement(a.Fragment,null,"CSS transition ",a.createElement("code",null,"className")," prefix.")},{name:"duration",type:"number",isRequired:!0,description:"CSS transition duration in milliseconds."},{name:"isPreserved",type:"boolean",defaultValue:"false",description:"Doesn't unmount the component and keep it in DOM."},{name:"hasShowAnimation",type:"boolean",defaultValue:"true",description:a.createElement(a.Fragment,null,"When ",a.createElement("code",null,"false"),", skips the show animation.")},{name:"hasHideAnimation",type:"boolean",defaultValue:"true",description:a.createElement(a.Fragment,null,"When ",a.createElement("code",null,"false"),", skips the hide animation.")},{name:"beforeShow",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:"Called before the show transition is started; right after the component is mounted and element is rendered in the DOM."},{name:"beforeHide",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:"Called before the hide transition is started."},{name:"afterShow",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:"Called after the show transition is completed."},{name:"afterHide",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:"Called after the hide transition is completed; the component is unmounted and element is removed from the DOM."}]}),a.createElement("h3",null,"CSS Classes"),a.createElement(y(),{marginBottom:16},a.createElement(k(),null,a.createElement(B(),{palette:"dynamic",isEven:!0},a.createElement(S(),null,"Name"),a.createElement(S(),null,"Description"))),a.createElement(g(),null,a.createElement(B(),null,a.createElement(v(),null,a.createElement("code",null,"className"),"-show"),a.createElement(v(),null,"It is assigned to the element when ",a.createElement("code",null,"status")," becomes ",a.createElement("code",null,"true"),".")),a.createElement(B(),null,a.createElement(v(),null,a.createElement("code",null,"className"),"-show-active"),a.createElement(v(),null,"It is assigned to the element after ",a.createElement("code",null,"className"),"-show is assigned. Transition references should take place in this class.")),a.createElement(B(),null,a.createElement(v(),null,a.createElement("code",null,"className"),"-hide"),a.createElement(v(),null,"It is assigned to the element when ",a.createElement("code",null,"status")," becomes ",a.createElement("code",null,"false"),".")),a.createElement(B(),null,a.createElement(v(),null,a.createElement("code",null,"className"),"-hide-active"),a.createElement(v(),null,"It is assigned to the element after ",a.createElement("code",null,"className"),"-hide is assigned. Transition references should take place in this class.")))),a.createElement(A.Z,{first:{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport CSSTransition from \'@smart-react-components/transition/CSSTransition\'\nimport Button from \'@smart-react-components/ui/Button\'\nimport React from \'react\'\nimport { createGlobalStyle } from \'styled-components\'\n\nconst GlobalStyle = createGlobalStyle`\n  .fade-show {\n    opacity: 0;\n  }\n\n  .fade-show-active {\n    opacity: 1;\n    transition: opacity 400ms ease-in-out;\n  }\n\n  .fade-hide {\n    opacity: 1;\n  }\n\n  .fade-hide-active {\n    opacity: 0;\n    transition: opacity 400ms ease-in-out;\n  }\n`\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  return (\n    <>\n      <GlobalStyle />\n      <Button onClick={() => setStatus(!status)}>Toggle</Button>\n      <CSSTransition\n        className="fade"\n        duration={400}\n        status={status}\n      >\n        <Div\n          alignItems="center"\n          background="!success"\n          borderRadius={4}\n          color="!success.font"\n          display="flex"\n          height={200}\n          justifyContent="center"\n          marginTop="$length.3"\n          width={200}\n        >\n          Box Element\n        </Div>\n      </CSSTransition>\n    </>\n  )\n}',output:a.createElement(P,null),title:"Custom Transition"},second:{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport CSSTransition from \'@smart-react-components/transition/CSSTransition\'\nimport Button from \'@smart-react-components/ui/Button\'\nimport React from \'react\'\nimport { createGlobalStyle } from \'styled-components\'\n\nconst GlobalStyle = createGlobalStyle`\n  .fade-show-active {\n    animation: fade 450ms 0s 1 normal ease-in-out;\n  }\n\n  .fade-hide-active {\n    animation: fade 450ms 0s 1 reverse ease-in-out;\n  }\n\n  @keyframes fade {\n    from {\n      opacity: 0;\n    }\n\n    to {\n      opacity: 1;\n    }\n  }\n`\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  return (\n    <>\n      <GlobalStyle />\n      <Button onClick={() => setStatus(!status)}>Toggle</Button>\n      <CSSTransition\n        className="fade"\n        duration={400}\n        status={status}\n      >\n        <Div\n          alignItems="center"\n          background="!danger"\n          borderRadius={4}\n          color="!danger.font"\n          display="flex"\n          height={200}\n          justifyContent="center"\n          marginTop="$length.3"\n          width={200}\n        >\n          Box Element\n        </Div>\n      </CSSTransition>\n    </>\n  )\n}',output:a.createElement(G,null),title:"Custom Animation"}}));var $=n(24086),M=n.n($),N=n(95967),I=n.n(N),V=n(7762);const W=()=>{const[e,t]=a.useState([]),[n,i]=a.useState("");return a.createElement(a.Fragment,null,a.createElement(I(),{placeholder:"Name",setValue:i,value:n}),a.createElement(h(),{isBlock:!0,marginTop:"$length.3",onClick:()=>{n.trim()&&!e.includes(n)&&(t([...e,n]),i(""))}},"Add"),a.createElement(M(),{className:"fade",duration:400},e.map((n=>a.createElement(m(),{alignItems:"center",background:"!warning",borderRadius:4,color:"!warning.font",display:"flex",key:n,justifyContent:"space-between",marginTop:"$length.3",padding:"{length.2} {length.3}"},a.createElement("span",null,n),a.createElement(m(),{cursor:"default",onClick:()=>t(e.filter((e=>e!==n)))},"❌"))))))},H=()=>a.createElement(a.Fragment,null,a.createElement("h2",{id:"css-transition-group"},"CSS Transition Group"),a.createElement(Z.Z,null),a.createElement("p",null,"CSS Transition Group uses CSS classes to handle animations asynchronously for its children components. It's similar to ",a.createElement(F.Z,{to:"/transition#transition-group"},"Transition Group"),"."),a.createElement("h3",null,"Props"),a.createElement(x.Z,{props:[{name:"children",type:"JSX.Element[]",isRequired:!0,description:"Components to be animated."},{name:"className",type:"string",isRequired:!0,description:a.createElement(a.Fragment,null,"CSS transition ",a.createElement("code",null,"className")," prefix.")},{name:"duration",type:"number",isRequired:!0,description:"CSS transition duration in milliseconds."},{name:"hasShowAnimation",type:"boolean",defaultValue:"true",description:a.createElement(a.Fragment,null,"When ",a.createElement("code",null,"false"),", skips the show animation.")},{name:"hasHideAnimation",type:"boolean",defaultValue:"true",description:a.createElement(a.Fragment,null,"When ",a.createElement("code",null,"false"),", skips the hide animation.")},{name:"beforeShow",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:"Called before the show transition is started; right after the component is mounted and element is rendered in the DOM."},{name:"beforeHide",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:"Called before the hide transition is started."},{name:"afterShow",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:"Called after the show transition is completed."},{name:"afterHide",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:"Called after the hide transition is completed; the component is unmounted and element is removed from the DOM."}]}),a.createElement(V.Z,{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport CSSTransitionGroup from \'@smart-react-components/transition/CSSTransitionGroup\'\nimport Button from \'@smart-react-components/ui/Button\'\nimport Input from \'@smart-react-components/ui/Input\'\nimport React from \'react\'\nimport { createGlobalStyle } from \'styled-components\'\n\nconst GlobalStyle = createGlobalStyle`\n  .fade-show {\n    opacity: 0;\n  }\n\n  .fade-show-active {\n    opacity: 1;\n    transition: opacity 400ms ease-in-out;\n  }\n\n  .fade-hide {\n    opacity: 1;\n  }\n\n  .fade-hide-active {\n    opacity: 0;\n    transition: opacity 400ms ease-in-out;\n  }\n`\n\nexport default () => {\n  const [list, setList] = React.useState<string[]>([])\n  const [value, setValue] = React.useState(\'\')\n\n  const addItem = () => {\n    if (value.trim() && !list.includes(value)) {\n      setList([...list, value])\n      setValue(\'\')\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Input placeholder="Name" setValue={setValue} value={value} />\n      <Button isBlock marginTop="$length.3" onClick={addItem}>Add</Button>\n      <CSSTransitionGroup className="fade" duration={400}>\n        {list.map(item => (\n          <Div\n            alignItems="center"\n            background="!warning"\n            borderRadius={4}\n            color="!warning.font"\n            display="flex"\n            key={item}\n            justifyContent="space-between"\n            marginTop="$length.3"\n            padding="{length.2} {length.3}"\n          >\n            <span>{ item }</span>\n            <Div\n              cursor="default"\n              onClick={() => setList(list.filter(i => i !== item))}\n            >\n              ❌\n            </Div>\n          </Div>\n        ))}\n      </CSSTransitionGroup>\n    </>\n  )\n}',output:a.createElement(W,null)}));var L=n(67189),O=n.n(L);const j=(0,D.default)(m())`
  border-radius: .25rem;
  height: 200px;
  width: 200px;
`,J=()=>{const[e,t]=a.useState("primary");return a.createElement(a.Fragment,null,a.createElement(m(),{display:"flex",marginBottom:"$length.3"},a.createElement(h(),{onClick:()=>t("primary")},"Primary"),a.createElement(h(),{onClick:()=>t("success"),marginLeft:"$length.3",palette:"success"},"Success"),a.createElement(h(),{onClick:()=>t("danger"),marginLeft:"$length.3",palette:"danger"},"Danger")),a.createElement(O(),{active:e,className:"fade",duration:400},a.createElement(j,{backgroundColor:"!primary",key:"primary"}),a.createElement(j,{backgroundColor:"!success",key:"success"}),a.createElement(j,{backgroundColor:"!danger",key:"danger"})))},X=()=>a.createElement(a.Fragment,null,a.createElement("h2",{id:"css-transition-switch"},"CSS Transition Switch"),a.createElement(Z.Z,null),a.createElement("p",null,"CSS Transition Switch works like ",a.createElement(F.Z,{to:"/transition#transition-switch"},"Transition Switch")," but uses the CSS classes to operate animations just like ",a.createElement(F.Z,{to:"/transition#css-transition"},"CSS Transition"),"."),a.createElement(x.Z,{props:[{name:"children",type:"JSX.Element[]",isRequired:!0,description:"Components to be animated."},{name:"active",type:a.createElement(F.Z,{to:"/api#value"},"Value"),isRequired:!0,description:"The active component key."},{name:"className",type:"string",isRequired:!0,description:a.createElement(a.Fragment,null,"CSS transition ",a.createElement("code",null,"className")," prefix.")},{name:"duration",type:"number",isRequired:!0,description:"CSS transition duration in milliseconds."},{name:"isPreserved",type:"boolean",defaultValue:"false",description:"Doesn't unmount the component and keep it in DOM."},{name:"hasShowAnimation",type:"boolean",defaultValue:"true",description:a.createElement(a.Fragment,null,"When ",a.createElement("code",null,"false"),", skips the show animation.")},{name:"hasHideAnimation",type:"boolean",defaultValue:"true",description:a.createElement(a.Fragment,null,"When ",a.createElement("code",null,"false"),", skips the hide animation.")},{name:"beforeShow",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:"Called before the show transition is started; right after the component is mounted and element is rendered in the DOM."},{name:"beforeHide",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:"Called before the hide transition is started."},{name:"afterShow",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:"Called after the show transition is completed."},{name:"afterHide",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:"Called after the hide transition is completed; the component is unmounted and element is removed from the DOM."}]}),a.createElement(V.Z,{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport CSSTransitionSwitch from \'@smart-react-components/transition/CSSTransitionSwitch\'\nimport Button from \'@smart-react-components/ui/Button\'\nimport React from \'react\'\nimport styled, { createGlobalStyle } from \'styled-components\'\n\nconst GlobalStyle = createGlobalStyle`\n  .fade-show {\n    opacity: 0;\n  }\n\n  .fade-show-active {\n    opacity: 1;\n    transition: opacity 400ms ease-in-out;\n  }\n\n  .fade-hide {\n    opacity: 1;\n  }\n\n  .fade-hide-active {\n    opacity: 0;\n    transition: opacity 400ms ease-in-out;\n  }\n`\n\nconst Box = styled(Div)`\n  border-radius: .25rem;\n  height: 200px;\n  width: 200px;\n`\n\nexport default () => {\n  const [active, setActive] = React.useState(\'primary\')\n\n  return (\n    <>\n      <Div display="flex" marginBottom="$length.3">\n        <Button onClick={() => setActive(\'primary\')}>Primary</Button>\n        <Button onClick={() => setActive(\'success\')} marginLeft="$length.3" palette="success">Success</Button>\n        <Button onClick={() => setActive(\'danger\')} marginLeft="$length.3" palette="danger">Danger</Button>\n      </Div>\n      <CSSTransitionSwitch active={active} className="fade" duration={400}>\n        <Box backgroundColor="!primary" key="primary" />\n        <Box backgroundColor="!success" key="success" />\n        <Box backgroundColor="!danger" key="danger" />\n      </CSSTransitionSwitch>\n    </>\n  )\n}',output:a.createElement(J,null)}));var _=n(91677),z=n.n(_);const K=({isPreserved:e})=>{const[t,n]=a.useState(!1);return a.createElement(a.Fragment,null,a.createElement(h(),{onClick:()=>n(!t)},"Toggle"),a.createElement(z(),{isPreserved:e,status:t,show:e=>new Promise((t=>{window.requestAnimationFrame((()=>{e.style.opacity="0",e.offsetWidth,e.style.transition="opacity 300ms 0s ease-in-out",e.style.opacity="1",setTimeout(t,300)}))})),hide:e=>new Promise((t=>{window.requestAnimationFrame((()=>{e.style.opacity="1",e.offsetWidth,e.style.transition="opacity 300ms 0s ease-in-out",e.style.opacity="0",setTimeout(t,300)}))}))},a.createElement(m(),{marginTop:"$length.3"},"This element is ",e?"not":""," removed from the DOM after the animation.")))},Q=()=>a.createElement(a.Fragment,null,a.createElement("h2",null,"Transition"),a.createElement(Z.Z,null),a.createElement("p",null,"Transition provides callbacks that return ",a.createElement("code",null,"Promise")," to display custom transitions."),a.createElement("h3",null,"Props"),a.createElement(x.Z,{props:[{name:"children",type:"JSX.Element",isRequired:!0,description:"Component to be animated."},{name:"status",type:"boolean",isRequired:!0,description:"Component display status."},{name:"isPreserved",type:"boolean",defaultValue:"false",description:"Doesn't unmount the component and keep it in DOM."},{name:"beforShow",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:a.createElement(a.Fragment,null,"Called before ",a.createElement("code",null,"show")," method is called; right after the component is mounted and element is rendered in the DOM.")},{name:"beforeHide",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:a.createElement(a.Fragment,null,"Called before ",a.createElement("code",null,"hide")," method is called.")},{name:"show",type:"(el: HTMLElement) => Promise<void>",description:"The method where the show animation is occured."},{name:"hide",type:"(el: HTMLElement) => Promise<void>",description:"The method where the hide animation is occured."},{name:"afterShow",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:a.createElement(a.Fragment,null,"Called after ",a.createElement("code",null,"show")," method is resolved.")},{name:"afterHide",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:a.createElement(a.Fragment,null,"Called after ",a.createElement("code",null,"hide")," method is resolved; the component is unmounted and element is removed from the DOM.")}]}),a.createElement(A.Z,{first:{code:"import Div from '@smart-react-components/core/Element/Div'\nimport Transition from '@smart-react-components/transition/Transition'\nimport Button from '@smart-react-components/ui/Button'\nimport React from 'react'\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  const show = el => new Promise<void>(resolve => {\n    window.requestAnimationFrame(() => {\n      el.style.opacity = '0'\n      let ignored = el.offsetWidth\n      el.style.transition = 'opacity 300ms 0s ease-in-out'\n      el.style.opacity = '1'\n      setTimeout(resolve, 300)\n    })\n  })\n\n  const hide = el => new Promise<void>(resolve => {\n    window.requestAnimationFrame(() => {\n      el.style.opacity = '1'\n      let ignored = el.offsetWidth\n      el.style.transition = 'opacity 300ms 0s ease-in-out'\n      el.style.opacity = '0'\n      setTimeout(resolve, 300)\n    })\n  })\n\n  return (\n    <>\n      <Button onClick={() => setStatus(!status)}>Toggle</Button>\n      <Transition status={status} show={show} hide={hide}>\n        <Div marginTop=\"$length.3\">This element is removed from the DOM after the animation.</Div>\n      </Transition>\n    </>\n  )\n}",output:a.createElement(K,{isPreserved:!1})},second:{code:"import Div from '@smart-react-components/core/Element/Div'\nimport Button from '@smart-react-components/ui/Button'\nimport Transition from '@smart-react-components/transition/Transition'\nimport React from 'react'\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  const show = el => new Promise<void>(resolve => {\n    window.requestAnimationFrame(() => {\n      el.style.opacity = '0'\n      let ignored = el.offsetWidth\n      el.style.transition = 'opacity 300ms 0s ease-in-out'\n      el.style.opacity = '1'\n      setTimeout(resolve, 300)\n    })\n  c})\n\n  const hide = el => new Promise<void>(resolve => {\n    window.requestAnimationFrame(() => {\n      el.style.opacity = '1'\n      let ignored = el.offsetWidth\n      el.style.transition = 'opacity 300ms 0s ease-in-out'\n      el.style.opacity = '0'\n      setTimeout(resolve, 300)\n    })\n  })\n\n  return (\n    <>\n      <Button onClick={() => setStatus(!status)}>Toggle</Button>\n      <Transition isPreserved status={status} show={show} hide={hide}>\n        <Div marginTop=\"$length.3\">This element is not removed from the DOM after the animation.</Div>\n      </Transition>\n    </>\n  )\n}",title:"Is Preserved",output:a.createElement(K,{isPreserved:!0})}}));var U=n(69747),Y=n.n(U);const ee=()=>{const[e,t]=a.useState([]),[n,i]=a.useState("");return a.createElement(a.Fragment,null,a.createElement(I(),{placeholder:"Name",setValue:i,value:n}),a.createElement(h(),{isBlock:!0,marginTop:"$length.3",onClick:()=>{n.trim()&&!e.includes(n)&&(t([...e,n]),i(""))}},"Add"),a.createElement(Y(),{hide:e=>new Promise((t=>{window.requestAnimationFrame((()=>{e.style.opacity="1",e.offsetWidth,e.style.transition="opacity 300ms 0s ease-in-out",e.style.opacity="0",setTimeout(t,300)}))})),show:e=>new Promise((t=>{window.requestAnimationFrame((()=>{e.style.opacity="0",e.offsetWidth,e.style.transition="opacity 300ms 0s ease-in-out",e.style.opacity="1",setTimeout(t,300)}))}))},e.map((n=>a.createElement(m(),{alignItems:"center",background:"!warning",borderRadius:4,color:"!warning.font",display:"flex",key:n,justifyContent:"space-between",marginTop:"$length.3",padding:"{length.2} {length.3}"},a.createElement("span",null,n),a.createElement(m(),{cursor:"default",onClick:()=>t(e.filter((e=>e!==n)))},"❌"))))))},te=()=>a.createElement(a.Fragment,null,a.createElement("h2",{id:"transition-group"},"Transition Group"),a.createElement(Z.Z,null),a.createElement("p",null,"Transition Group handles animations asynchronously for its children components."),a.createElement("h3",null,"Props"),a.createElement(x.Z,{props:[{name:"children",type:"JSX.Element[]",isRequired:!0,description:"Components to be animated."},{name:"beforShow",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:a.createElement(a.Fragment,null,"Called before ",a.createElement("code",null,"show")," method is called; right after the component is mounted and element is rendered in the DOM.")},{name:"beforeHide",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:a.createElement(a.Fragment,null,"Called before ",a.createElement("code",null,"hide")," method is called.")},{name:"show",type:"(el: HTMLElement) => Promise<void>",description:"The method where the show animation is occured."},{name:"hide",type:"(el: HTMLElement) => Promise<void>",description:"The method where the hide animation is occured."},{name:"afterShow",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:a.createElement(a.Fragment,null,"Called after ",a.createElement("code",null,"show")," method is resolved.")},{name:"afterHide",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:a.createElement(a.Fragment,null,"Called after ",a.createElement("code",null,"hide")," method is resolved; the component is unmounted and element is removed from the DOM.")}]}),a.createElement(V.Z,{code:"import Div from '@smart-react-components/core/Element/Div'\nimport TransitionGroup from '@smart-react-components/transition/TransitionGroup'\nimport Button from '@smart-react-components/ui/Button'\nimport Input from '@smart-react-components/ui/Input'\nimport React from 'react'\n\nexport default () => {\n  const [list, setList] = React.useState<string[]>([])\n  const [value, setValue] = React.useState('')\n\n  const show = el => new Promise<void>(resolve => {\n    window.requestAnimationFrame(() => {\n      el.style.opacity = '0'\n      let ignored = el.offsetWidth\n      el.style.transition = 'opacity 300ms 0s ease-in-out'\n      el.style.opacity = '1'\n      setTimeout(resolve, 300)\n    })\n  })\n\n  const hide = el => new Promise<void>(resolve => {\n    window.requestAnimationFrame(() => {\n      el.style.opacity = '1'\n      let ignored = el.offsetWidth\n      el.style.transition = 'opacity 300ms 0s ease-in-out'\n      el.style.opacity = '0'\n      setTimeout(resolve, 300)\n    })\n  })\n\n  const addItem = () => {\n    if (value.trim() && !list.includes(value)) {\n      setList([...list, value])\n      setValue('')\n    }\n  }\n\n  return (\n    <>\n      <Input placeholder=\"Name\" setValue={setValue} value={value} />\n      <Button isBlock marginTop=\"$length.3\" onClick={addItem}>Add</Button>\n      <TransitionGroup hide={hide} show={show}>\n        {list.map(item => (\n          <Div\n            alignItems=\"center\"\n            background=\"!warning\"\n            borderRadius={4}\n            color=\"!warning.font\"\n            display=\"flex\"\n            key={item}\n            justifyContent=\"space-between\"\n            marginTop=\"$length.3\"\n            padding=\"{length.2} {length.3}\"\n          >\n            <span>{ item }</span>\n            <Div\n              cursor=\"default\"\n              onClick={() => setList(list.filter(i => i !== item))}\n            >\n              ❌\n            </Div>\n          </Div>\n        ))}\n      </TransitionGroup>\n    </>\n  )\n}",output:a.createElement(ee,null)}));var ne=n(90121),ae=n.n(ne);const ie=(0,D.default)(m())`
  border-radius: .25rem;
  height: 200px;
  width: 200px;
`,oe=()=>{const[e,t]=a.useState("primary");return a.createElement(a.Fragment,null,a.createElement(m(),{display:"flex",marginBottom:"$length.3"},a.createElement(h(),{onClick:()=>t("primary")},"Primary"),a.createElement(h(),{onClick:()=>t("success"),marginLeft:"$length.3",palette:"success"},"Success"),a.createElement(h(),{onClick:()=>t("danger"),marginLeft:"$length.3",palette:"danger"},"Danger")),a.createElement(ae(),{active:e,hide:e=>new Promise((t=>{window.requestAnimationFrame((()=>{e.style.opacity="1",e.offsetWidth,e.style.transition="opacity 300ms 0s ease-in-out",e.style.opacity="0",setTimeout(t,300)}))})),show:e=>new Promise((t=>{window.requestAnimationFrame((()=>{e.style.opacity="0",e.offsetWidth,e.style.transition="opacity 300ms 0s ease-in-out",e.style.opacity="1",setTimeout(t,300)}))}))},a.createElement(ie,{backgroundColor:"!primary",key:"primary"}),a.createElement(ie,{backgroundColor:"!success",key:"success"}),a.createElement(ie,{backgroundColor:"!danger",key:"danger"})))},re=()=>a.createElement(a.Fragment,null,a.createElement("h2",{id:"transition-switch"},"Transition Switch"),a.createElement(Z.Z,null),a.createElement("p",null,"Transition Switch takes components as its children and renders the active component. When the active component is changed, it firsts triggers the hide animation for the current component, then triggers the show animation for the new active component in a row."),a.createElement("p",null,"Each child element should have a key for the switch component to use in checking the component activeness status."),a.createElement("h3",null,"Props"),a.createElement(x.Z,{props:[{name:"children",type:"JSX.Element[]",isRequired:!0,description:"Components to be animated."},{name:"active",type:a.createElement(F.Z,{to:"/api#value"},"Value"),isRequired:!0,description:"The active component key."},{name:"isPreserved",type:"boolean",defaultValue:"false",description:"Doesn't unmount the component and keep it in DOM."},{name:"beforShow",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:a.createElement(a.Fragment,null,"Called before ",a.createElement("code",null,"show")," method is called; right after the component is mounted and element is rendered in the DOM.")},{name:"beforeHide",type:a.createElement(F.Z,{to:"/api#transition-before-callback"},"TransitionBeforeCallback"),description:a.createElement(a.Fragment,null,"Called before ",a.createElement("code",null,"hide")," method is called.")},{name:"show",type:"(el: HTMLElement) => Promise<void>",description:"The method where the show animation is occured."},{name:"hide",type:"(el: HTMLElement) => Promise<void>",description:"The method where the hide animation is occured."},{name:"afterShow",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:a.createElement(a.Fragment,null,"Called after ",a.createElement("code",null,"show")," method is resolved.")},{name:"afterHide",type:a.createElement(F.Z,{to:"/api#transition-after-callback"},"TransitionAfterCallback"),description:a.createElement(a.Fragment,null,"Called after ",a.createElement("code",null,"hide")," method is resolved; the component is unmounted and element is removed from the DOM.")}]}),a.createElement(V.Z,{code:"import Div from '@smart-react-components/core/Element/Div'\nimport TransitionSwitch from '@smart-react-components/transition/TransitionSwitch'\nimport Button from '@smart-react-components/ui/Button'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Box = styled(Div)`\n  border-radius: .25rem;\n  height: 200px;\n  width: 200px;\n`\n\nexport default () => {\n  const [active, setActive] = React.useState('primary')\n\n  const show = el => new Promise<void>(resolve => {\n    window.requestAnimationFrame(() => {\n      el.style.opacity = '0'\n      let ignored = el.offsetWidth\n      el.style.transition = 'opacity 300ms 0s ease-in-out'\n      el.style.opacity = '1'\n      setTimeout(resolve, 300)\n    })\n  })\n\n  const hide = el => new Promise<void>(resolve => {\n    window.requestAnimationFrame(() => {\n      el.style.opacity = '1'\n      let ignored = el.offsetWidth\n      el.style.transition = 'opacity 300ms 0s ease-in-out'\n      el.style.opacity = '0'\n      setTimeout(resolve, 300)\n    })\n  })\n\n  return (\n    <>\n      <Div display=\"flex\" marginBottom=\"$length.3\">\n        <Button onClick={() => setActive('primary')}>Primary</Button>\n        <Button onClick={() => setActive('success')} marginLeft=\"$length.3\" palette=\"success\">Success</Button>\n        <Button onClick={() => setActive('danger')} marginLeft=\"$length.3\" palette=\"danger\">Danger</Button>\n      </Div>\n      <TransitionSwitch active={active} hide={hide} show={show}>\n        <Box backgroundColor=\"!primary\" key=\"primary\" />\n        <Box backgroundColor=\"!success\" key=\"success\" />\n        <Box backgroundColor=\"!danger\" key=\"danger\" />\n      </TransitionSwitch>\n    </>\n  )\n}\n",output:a.createElement(oe,null)})),se=()=>((0,l.Z)({title:"Transition"}),a.createElement(s.Z,null,a.createElement(r.Z,null,a.createElement("div",null,a.createElement("h1",{id:"transition"},"Transition"),a.createElement("p",null,"The transition module includes transiton components to animate React and Styled components on mount and unmount."),a.createElement(Q,null),a.createElement(q,null),a.createElement(re,null),a.createElement(X,null),a.createElement(te,null),a.createElement(H,null)),a.createElement(o.Z,{next:{label:"Router",to:"/router"},prev:{label:"Wave Effect",to:"/ui-components/wave-effect"}})),a.createElement(i.Z,{list:[{label:"Transition",id:"transition"},{label:"CSS Transition",id:"css-transition"},{label:"Transition Switch",id:"transition-switch"},{label:"CSS Transition Switch",id:"css-transition-switch"},{label:"Transition Group",id:"transition-group"},{label:"CSS Transition Group",id:"css-transition-group"}]})))}}]);