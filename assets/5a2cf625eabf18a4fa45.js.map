{"version":3,"file":"5a2cf625eabf18a4fa45.js","mappings":"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","sources":["webpack://smart-react-components-page/./src/containers/PopUp.tsx"],"sourcesContent":["import Button from '@smart-react-components/ui/Button';\nimport Alert from '@smart-react-components/ui/PopUp/Alert';\nimport Confirm from '@smart-react-components/ui/PopUp/Confirm';\nimport Prompt from '@smart-react-components/ui/PopUp/Prompt';\nimport React from 'react';\nimport ComponentType from '../components/ComponentType';\nimport LabelLink from '../components/LabelLink';\nimport Navbar from '../components/Nav';\nimport PropsTable from '../components/PropsTable';\nimport SuggestedPages from '../components/SuggestedPages';\nimport Content from '../elements/Content';\nimport Page from '../elements/Page';\nimport usePage from '../hooks/usePage';\nimport Example from '../components/Example';\nconst AlertExample = () => {\n    const [status, setStatus] = React.useState(false);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Button, { onClick: () => setStatus(true) }, \"Open Alert\"),\n        React.createElement(Alert, { message: \"Alert Message...\", setStatus: setStatus, status: status, title: \"Title\" })));\n};\nconst ConfirmExample = () => {\n    const [status, setStatus] = React.useState(false);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Button, { onClick: () => setStatus(true) }, \"Open Confirm\"),\n        React.createElement(Confirm, { message: \"Confirm Message...\", setStatus: setStatus, status: status, title: \"Title\" })));\n};\nconst PromptExample = () => {\n    const [status, setStatus] = React.useState(false);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Button, { onClick: () => setStatus(true) }, \"Open Prompt\"),\n        React.createElement(Prompt, { defaultValue: \"Value\", message: \"Prompt Message...\", placeholder: \"Placeholder...\", setStatus: setStatus, status: status, title: \"Title\" })));\n};\nconst PopUp = () => {\n    usePage({ title: 'Pop-up' });\n    return (React.createElement(Page, null,\n        React.createElement(Content, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"h1\", { id: \"pop-up\" }, \"Pop-up\"),\n                React.createElement(\"p\", null,\n                    \"Pop-up uses \",\n                    React.createElement(LabelLink, { to: \"/ui-components/modal\" }, \"Modal\"),\n                    \" to build JavaScript dialog methods.\"),\n                React.createElement(\"h2\", { id: \"alert\" }, \"Alert\"),\n                React.createElement(ComponentType, null),\n                React.createElement(\"p\", null,\n                    \"Imitates \",\n                    React.createElement(\"code\", null, \"alert\"),\n                    \" method.\"),\n                React.createElement(PropsTable, { props: [\n                        {\n                            name: 'message',\n                            type: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \" | \",\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \"[]\"),\n                            isRequired: true,\n                            description: 'Modal content.',\n                        },\n                        {\n                            name: 'status',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: 'Modal display status.'\n                        },\n                        {\n                            name: 'setStatus',\n                            type: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/api#set-status\" }, \"SetStatus\"),\n                                \"<boolean>\"),\n                            description: React.createElement(React.Fragment, null,\n                                \"The method that sets \",\n                                React.createElement(\"code\", null, \"status\"),\n                                \".\"),\n                        },\n                        {\n                            name: 'title',\n                            type: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \" | \",\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \"[]\"),\n                            description: 'Modal title.',\n                        },\n                        {\n                            name: 'buttonLabel',\n                            type: 'string',\n                            defaultValue: 'i18n.ok',\n                            description: 'Button label.',\n                        },\n                        {\n                            name: 'buttonPalette',\n                            type: React.createElement(LabelLink, { to: \"/api#palette-prop\" }, \"PaletteProp\"),\n                            defaultValue: 'primary',\n                            description: 'Button palette item key.',\n                        },\n                        {\n                            name: 'action',\n                            type: '() => void | Promise<void>',\n                            description: 'Called when clicked on the save button.'\n                        },\n                        {\n                            name: 'hasOverlayBackground',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/ui-components/overlay#overlay\" }, \"Overlay\"),\n                                \" \",\n                                React.createElement(\"code\", null, \"hasBackground\"),\n                                \" prop.\")\n                        },\n                        {\n                            name: 'hasOverlayBlurEffect',\n                            type: 'boolean',\n                            defaultValue: 'false',\n                            description: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/ui-components/overlay#overlay\" }, \"Overlay\"),\n                                \" \",\n                                React.createElement(\"code\", null, \"hasBlurEffect\"),\n                                \" prop.\")\n                        },\n                        {\n                            name: 'transitionClassName',\n                            type: 'string',\n                            description: React.createElement(React.Fragment, null,\n                                \"Transition \",\n                                React.createElement(\"code\", null, \"className\"),\n                                \" prefix.\"),\n                        },\n                        {\n                            name: 'transitionDuration',\n                            type: 'number',\n                            description: 'Transition duration in milliseconds.',\n                        },\n                        {\n                            name: 'hasShowAnimation',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                \"When \",\n                                React.createElement(\"code\", null, \"false\"),\n                                \", skips the show animation.\"),\n                        },\n                        {\n                            name: 'hasHideAnimation',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                \"When \",\n                                React.createElement(\"code\", null, \"false\"),\n                                \", skips the hide animation.\"),\n                        },\n                        {\n                            name: 'beforeShow',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-before-callback\" }, \"TransitionBeforeCallback\"),\n                            description: 'Called before the show transition is started; right after the component is mounted and element is rendered in the DOM.',\n                        },\n                        {\n                            name: 'beforeHide',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-before-callback\" }, \"TransitionBeforeCallback\"),\n                            description: 'Called before the hide transition is started.',\n                        },\n                        {\n                            name: 'afterShow',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-after-callback\" }, \"TransitionAfterCallback\"),\n                            description: 'Called after the show transition is completed.',\n                        },\n                        {\n                            name: 'afterHide',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-after-callback\" }, \"TransitionAfterCallback\"),\n                            description: 'Called after the hide transition is completed; the component is unmounted and element is removed from the DOM.',\n                        },\n                    ] }),\n                React.createElement(Example, { code: `import Button from '@smart-react-components/ui/Button'\nimport Alert from '@smart-react-components/ui/PopUp/Alert'\nimport React from 'react'\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  return (\n    <>  \n      <Button onClick={() => setStatus(true)}>Open Alert</Button>\n      <Alert\n        message=\"Alert Message...\"\n        setStatus={setStatus}\n        status={status}\n        title=\"Title\"\n      />\n    </>\n  )\n}`, output: React.createElement(AlertExample, null) }),\n                React.createElement(\"h2\", { id: \"confirm\" }, \"Confirm\"),\n                React.createElement(ComponentType, null),\n                React.createElement(\"p\", null,\n                    \"Imitates \",\n                    React.createElement(\"code\", null, \"confirm\"),\n                    \" method.\"),\n                React.createElement(\"h3\", null, \"Props\"),\n                React.createElement(PropsTable, { props: [\n                        {\n                            name: 'message',\n                            type: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \" | \",\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \"[]\"),\n                            isRequired: true,\n                            description: 'Modal content.',\n                        },\n                        {\n                            name: 'status',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: 'Modal display status.'\n                        },\n                        {\n                            name: 'setStatus',\n                            type: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/api#set-status\" }, \"SetStatus\"),\n                                \"<boolean>\"),\n                            description: React.createElement(React.Fragment, null,\n                                \"The method that sets \",\n                                React.createElement(\"code\", null, \"status\"),\n                                \".\"),\n                        },\n                        {\n                            name: 'title',\n                            type: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \" | \",\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \"[]\"),\n                            description: 'Modal title.',\n                        },\n                        {\n                            name: 'cancelButtonLabel',\n                            type: 'string',\n                            defaultValue: 'i18n.cancel',\n                            description: 'Cancel button label.',\n                        },\n                        {\n                            name: 'confirmButtonLabel',\n                            type: 'string',\n                            defaultValue: 'i18n.ok',\n                            description: 'Confirm button label.',\n                        },\n                        {\n                            name: 'cancelButtonPalette',\n                            type: React.createElement(LabelLink, { to: \"/api#palette-prop\" }, \"PaletteProp\"),\n                            defaultValue: 'primary',\n                            description: 'Cancel button palette item key.',\n                        },\n                        {\n                            name: 'confirmButtonPalette',\n                            type: React.createElement(LabelLink, { to: \"/api#palette-prop\" }, \"PaletteProp\"),\n                            defaultValue: 'primary',\n                            description: 'Confirm button palette item key.',\n                        },\n                        {\n                            name: 'action',\n                            type: '(isConfirmed: boolean) => void | Promise<void>',\n                            description: 'Called when clicked on the save or cancel buttons.'\n                        },\n                        {\n                            name: 'hasOverlayBackground',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/ui-components/overlay#overlay\" }, \"Overlay\"),\n                                \" \",\n                                React.createElement(\"code\", null, \"hasBackground\"),\n                                \" prop.\")\n                        },\n                        {\n                            name: 'hasOverlayBlurEffect',\n                            type: 'boolean',\n                            defaultValue: 'false',\n                            description: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/ui-components/overlay#overlay\" }, \"Overlay\"),\n                                \" \",\n                                React.createElement(\"code\", null, \"hasBlurEffect\"),\n                                \" prop.\")\n                        },\n                        {\n                            name: 'transitionClassName',\n                            type: 'string',\n                            description: React.createElement(React.Fragment, null,\n                                \"Transition \",\n                                React.createElement(\"code\", null, \"className\"),\n                                \" prefix.\"),\n                        },\n                        {\n                            name: 'transitionDuration',\n                            type: 'number',\n                            description: 'Transition duration in milliseconds.',\n                        },\n                        {\n                            name: 'hasShowAnimation',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                \"When \",\n                                React.createElement(\"code\", null, \"false\"),\n                                \", skips the show animation.\"),\n                        },\n                        {\n                            name: 'hasHideAnimation',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                \"When \",\n                                React.createElement(\"code\", null, \"false\"),\n                                \", skips the hide animation.\"),\n                        },\n                        {\n                            name: 'beforeShow',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-before-callback\" }, \"TransitionBeforeCallback\"),\n                            description: 'Called before the show transition is started; right after the component is mounted and element is rendered in the DOM.',\n                        },\n                        {\n                            name: 'beforeHide',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-before-callback\" }, \"TransitionBeforeCallback\"),\n                            description: 'Called before the hide transition is started.',\n                        },\n                        {\n                            name: 'afterShow',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-after-callback\" }, \"TransitionAfterCallback\"),\n                            description: 'Called after the show transition is completed.',\n                        },\n                        {\n                            name: 'afterHide',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-after-callback\" }, \"TransitionAfterCallback\"),\n                            description: 'Called after the hide transition is completed; the component is unmounted and element is removed from the DOM.',\n                        },\n                    ] }),\n                React.createElement(Example, { code: `import Button from '@smart-react-components/ui/Button'\nimport Confirm from '@smart-react-components/ui/PopUp/Confirm'\nimport React from 'react'\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  return (\n    <>  \n      <Button onClick={() => setStatus(true)}>Open Confirm</Button>\n      <Confirm\n        message=\"Confirm Message...\"\n        setStatus={setStatus}\n        status={status}\n        title=\"Title\"\n      />\n    </>\n  )\n}`, output: React.createElement(ConfirmExample, null) }),\n                React.createElement(\"h2\", { id: \"prompt\" }, \"Prompt\"),\n                React.createElement(ComponentType, null),\n                React.createElement(\"p\", null,\n                    \"Imitates \",\n                    React.createElement(\"code\", null, \"prompt\"),\n                    \" method.\"),\n                React.createElement(\"h3\", null, \"Props\"),\n                React.createElement(PropsTable, { props: [\n                        {\n                            name: 'message',\n                            type: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \" | \",\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \"[]\"),\n                            isRequired: true,\n                            description: 'Modal content.',\n                        },\n                        {\n                            name: 'status',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: 'Modal display status.'\n                        },\n                        {\n                            name: 'setStatus',\n                            type: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/api#set-status\" }, \"SetStatus\"),\n                                \"<boolean>\"),\n                            description: React.createElement(React.Fragment, null,\n                                \"The method that sets \",\n                                React.createElement(\"code\", null, \"status\"),\n                                \".\"),\n                        },\n                        {\n                            name: 'title',\n                            type: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \" | \",\n                                React.createElement(LabelLink, { to: \"/api#content-element\" }, \"ContentElement\"),\n                                \"[]\"),\n                            description: 'Modal title.',\n                        },\n                        {\n                            name: 'defaultValue',\n                            type: 'string',\n                            description: 'Input initial value.',\n                        },\n                        {\n                            name: 'placeholder',\n                            type: 'string',\n                            description: 'Input placeholder.',\n                        },\n                        {\n                            name: 'cancelButtonLabel',\n                            type: 'string',\n                            defaultValue: 'i18n.cancel',\n                            description: 'Cancel button label.',\n                        },\n                        {\n                            name: 'confirmButtonLabel',\n                            type: 'string',\n                            defaultValue: 'i18n.ok',\n                            description: 'Confirm button label.',\n                        },\n                        {\n                            name: 'cancelButtonPalette',\n                            type: React.createElement(LabelLink, { to: \"/api#palette-prop\" }, \"PaletteProp\"),\n                            defaultValue: 'primary',\n                            description: 'Cancel button palette item key.',\n                        },\n                        {\n                            name: 'confirmButtonPalette',\n                            type: React.createElement(LabelLink, { to: \"/api#palette-prop\" }, \"PaletteProp\"),\n                            defaultValue: 'primary',\n                            description: 'Confirm button palette item key.',\n                        },\n                        {\n                            name: 'action',\n                            type: '(text: string, isConfirmed: boolean) => void | Promise<void>',\n                            description: 'Called when clicked on the save or cancel buttons.'\n                        },\n                        {\n                            name: 'hasOverlayBackground',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/ui-components/overlay#overlay\" }, \"Overlay\"),\n                                \" \",\n                                React.createElement(\"code\", null, \"hasBackground\"),\n                                \" prop.\")\n                        },\n                        {\n                            name: 'hasOverlayBlurEffect',\n                            type: 'boolean',\n                            defaultValue: 'false',\n                            description: React.createElement(React.Fragment, null,\n                                React.createElement(LabelLink, { to: \"/ui-components/overlay#overlay\" }, \"Overlay\"),\n                                \" \",\n                                React.createElement(\"code\", null, \"hasBlurEffect\"),\n                                \" prop.\")\n                        },\n                        {\n                            name: 'transitionClassName',\n                            type: 'string',\n                            description: React.createElement(React.Fragment, null,\n                                \"Transition \",\n                                React.createElement(\"code\", null, \"className\"),\n                                \" prefix.\"),\n                        },\n                        {\n                            name: 'transitionDuration',\n                            type: 'number',\n                            description: 'Transition duration in milliseconds.',\n                        },\n                        {\n                            name: 'hasShowAnimation',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                \"When \",\n                                React.createElement(\"code\", null, \"false\"),\n                                \", skips the show animation.\"),\n                        },\n                        {\n                            name: 'hasHideAnimation',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                \"When \",\n                                React.createElement(\"code\", null, \"false\"),\n                                \", skips the hide animation.\"),\n                        },\n                        {\n                            name: 'beforeShow',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-before-callback\" }, \"TransitionBeforeCallback\"),\n                            description: 'Called before the show transition is started; right after the component is mounted and element is rendered in the DOM.',\n                        },\n                        {\n                            name: 'beforeHide',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-before-callback\" }, \"TransitionBeforeCallback\"),\n                            description: 'Called before the hide transition is started.',\n                        },\n                        {\n                            name: 'afterShow',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-after-callback\" }, \"TransitionAfterCallback\"),\n                            description: 'Called after the show transition is completed.',\n                        },\n                        {\n                            name: 'afterHide',\n                            type: React.createElement(LabelLink, { to: \"/api#transition-after-callback\" }, \"TransitionAfterCallback\"),\n                            description: 'Called after the hide transition is completed; the component is unmounted and element is removed from the DOM.',\n                        },\n                    ] }),\n                React.createElement(Example, { code: `import Button from '@smart-react-components/ui/Button'\nimport Prompt from '@smart-react-components/ui/PopUp/Prompt'\nimport React from 'react'\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  return (\n    <>  \n      <Button onClick={() => setStatus(true)}>Open Prompt</Button>\n      <Prompt\n        defaultValue=\"Value\"\n        message=\"Prompt Message...\"\n        placeholder=\"Placeholder...\"\n        setStatus={setStatus}\n        status={status}\n        title=\"Title\"\n      />\n    </>\n  )\n}`, output: React.createElement(PromptExample, null) })),\n            React.createElement(SuggestedPages, { next: {\n                    label: 'Popover',\n                    to: '/ui-components/popover',\n                }, prev: {\n                    label: 'Pagination',\n                    to: '/ui-components/pagination',\n                } })),\n        React.createElement(Navbar, { list: [\n                { label: 'Pop-up', id: 'pop-up' },\n                { label: 'Alert', id: 'alert' },\n                { label: 'Confirm', id: 'confirm' },\n                { label: 'Prompt', id: 'prompt' },\n            ] })));\n};\nexport default PopUp;\n"],"names":[],"sourceRoot":""}