"use strict";(self.webpackChunksmart_react_components_page=self.webpackChunksmart_react_components_page||[]).push([[969],{81969:(e,n,t)=>{t.r(n),t.d(n,{default:()=>R});var a=t(81871),l=t.n(a),r=t(5302),i=t.n(r),s=t(15287),u=t.n(s),o=t(67294),m=t(45451),p=t(6847),g=t(44583),c=t(94086),d=t(40074),h=t(16127),f=t(23235),V=t(69229),v=t(666),x=t(26617);const y=()=>{const[e,n]=o.useState(50),[t,a]=o.useState(50);return o.createElement(o.Fragment,null,o.createElement(l(),{alignItems:"center",display:"flex"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",setValue:n,value:e,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},value:e})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",setValue:a,value:t,width:50}),o.createElement(u(),{elementProps:{flex:"1 1 auto"},value:t})))},E=()=>{const[e,n]=o.useState(50),[t,a]=o.useState(50);return o.createElement(o.Fragment,null,o.createElement(l(),{alignItems:"center",display:"flex"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",setValue:n,value:e,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},value:e})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",setValue:a,value:t,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},suffix:"",totalValue:100,value:t})))},S=()=>{const[e,n]=o.useState(50),[t,a]=o.useState(50),[r,s]=o.useState(50),[m,p]=o.useState(50),[g,c]=o.useState(50),[d,h]=o.useState(50),[f,V]=o.useState(50),[v,x]=o.useState(50);return o.createElement(o.Fragment,null,o.createElement(l(),{alignItems:"center",display:"flex"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",setValue:n,value:e,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},value:e})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"secondary",setValue:a,value:t,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},palette:"secondary",value:t})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"success",setValue:s,value:r,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},palette:"success",value:r})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"danger",setValue:p,value:m,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},palette:"danger",value:m})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"warning",setValue:c,value:g,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},palette:"warning",value:g})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"info",setValue:h,value:d,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},palette:"info",value:d})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"light",setValue:V,value:f,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},palette:"light",value:f})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"dark",setValue:x,value:v,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},palette:"dark",value:v})))},P=()=>{const[e,n]=o.useState(50),[t,a]=o.useState(50),[r,s]=o.useState(50),[m,p]=o.useState(50),[g,c]=o.useState(50),[d,h]=o.useState(50),[f,V]=o.useState(50),[v,x]=o.useState(50);return o.createElement(o.Fragment,null,o.createElement(l(),{alignItems:"center",display:"flex"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",setValue:n,value:e,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isFilled:!0,value:e})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"secondary",setValue:a,value:t,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isFilled:!0,palette:"secondary",value:t})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"success",setValue:s,value:r,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isFilled:!0,palette:"success",value:r})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"danger",setValue:p,value:m,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isFilled:!0,palette:"danger",value:m})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"warning",setValue:c,value:g,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isFilled:!0,palette:"warning",value:g})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"info",setValue:h,value:d,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isFilled:!0,palette:"info",value:d})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"light",setValue:V,value:f,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isFilled:!0,palette:"light",value:f})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"dark",setValue:x,value:v,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isFilled:!0,palette:"dark",value:v})))},I=()=>{const[e,n]=o.useState(50),[t,a]=o.useState(50),[r,s]=o.useState(50),[m,p]=o.useState(50),[g,c]=o.useState(50),[d,h]=o.useState(50),[f,V]=o.useState(50),[v,x]=o.useState(50);return o.createElement(o.Fragment,null,o.createElement(l(),{alignItems:"center",display:"flex"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",setValue:n,value:e,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isStriped:!0,value:e})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"secondary",setValue:a,value:t,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isStriped:!0,palette:"secondary",value:t})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"success",setValue:s,value:r,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isStriped:!0,palette:"success",value:r})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"danger",setValue:p,value:m,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isStriped:!0,palette:"danger",value:m})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"warning",setValue:c,value:g,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isStriped:!0,palette:"warning",value:g})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"info",setValue:h,value:d,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isStriped:!0,palette:"info",value:d})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"light",setValue:V,value:f,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isStriped:!0,palette:"light",value:f})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"dark",setValue:x,value:v,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},isStriped:!0,palette:"dark",value:v})))},$=()=>{const[e,n]=o.useState(50),[t,a]=o.useState(50),[r,s]=o.useState(50),[m,p]=o.useState(50),[g,c]=o.useState(50),[d,h]=o.useState(50),[f,V]=o.useState(50),[v,x]=o.useState(50);return o.createElement(o.Fragment,null,o.createElement(l(),{alignItems:"center",display:"flex"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",setValue:n,value:e,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},hasStripedAnimation:!1,isStriped:!0,value:e})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"secondary",setValue:a,value:t,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},hasStripedAnimation:!1,isStriped:!0,palette:"secondary",value:t})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"success",setValue:s,value:r,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},hasStripedAnimation:!1,isStriped:!0,palette:"success",value:r})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"danger",setValue:p,value:m,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},hasStripedAnimation:!1,isStriped:!0,palette:"danger",value:m})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"warning",setValue:c,value:g,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},hasStripedAnimation:!1,isStriped:!0,palette:"warning",value:g})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"info",setValue:h,value:d,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},hasStripedAnimation:!1,isStriped:!0,palette:"info",value:d})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"light",setValue:V,value:f,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},hasStripedAnimation:!1,isStriped:!0,palette:"light",value:f})),o.createElement(l(),{alignItems:"center",display:"flex",marginTop:"$length.3"},o.createElement(i(),{flex:"0 0 auto",marginRight:"$length.3",palette:"dark",setValue:x,value:v,width:50}),o.createElement(u(),{displayValue:!0,elementProps:{flex:"1 1 auto"},hasStripedAnimation:!1,isStriped:!0,palette:"dark",value:v})))},R=()=>((0,v.Z)({title:"Progress Bar"}),o.createElement(V.Z,null,o.createElement(f.Z,null,o.createElement("div",null,o.createElement("h1",null,"Progress Bar"),o.createElement("p",null,"Animated progress bar."),o.createElement(p.Z,null),o.createElement(d.Z,{props:[{name:"value",type:"number",isRequired:!0,description:o.createElement(o.Fragment,null,"If ",o.createElement("code",null,"totalValue")," is given, it is enumerator if not, it is percentage value and can be ",o.createElement("code",null,"0")," to ",o.createElement("code",null,"100"),".")},{name:"totalValue",type:"number",description:"Denominator value."},{name:"palette",type:o.createElement(g.Z,{to:"/api#palette-prop"},"PaletteProp"),defaultValue:"primary",description:"Palette item key."},{name:"isFilled",type:"boolean",defaultValue:"false",description:o.createElement(o.Fragment,null,"Fills blank area with color in ",o.createElement("code",null,"backgroundFilled"),".")},{name:"isNested",type:"boolean",defaultValue:"false",description:o.createElement(o.Fragment,null,"Sets background to ",o.createElement("code",null,"backgroundNested")," and height to ",o.createElement("code",null,"100%"),".It is useful when Progress Bar is used in another component.")},{name:"isStriped",type:"boolean",defaultValue:"false",description:o.createElement(o.Fragment,null,"Adds striped effect to Progress Bar.")},{name:"displayValue",type:"boolean",defaultValue:"false",description:"Displays value at the middle of the bar."},{name:"prefix",type:"string",defaultValue:"i18n.progressBar.prefix",description:o.createElement(o.Fragment,null,"Prefix value of both ",o.createElement("code",null,"value")," and ",o.createElement("code",null,"totalValue"),".")},{name:"suffix",type:"string",defaultValue:"i18n.progressBar.suffix",description:o.createElement(o.Fragment,null,"Suffix value of both ",o.createElement("code",null,"value")," and ",o.createElement("code",null,"totalValue"),". Defaults to ",o.createElement("code",null,"null")," if ",o.createElement("code",null,"totalValue")," is given.")},{name:"separator",type:"string",defaultValue:"i18n.progressBar.separator",description:o.createElement(o.Fragment,null,"Separator value between ",o.createElement("code",null,"value")," and ",o.createElement("code",null,"totalValue"),". Displayed only when ",o.createElement("code",null,"totalValue")," is given.")},{name:"transitionDuration",type:"number",defaultValue:"450",description:"Duration of progress bar transition during value change."},{name:"transitionTimingFunction",type:o.createElement(g.Z,{to:"/styled-props"},"StyledProps.TimingFunction"),defaultValue:"linear"},{name:"hasStripedAnimation",type:"boolean",defaultValue:"true",description:"Adds animation to striped effect."},{name:"elementProps",type:o.createElement(g.Z,{to:"/api#jsx-element-props"},"JSXElementProps"),description:o.createElement(o.Fragment,null,"Progress Bar element ",o.createElement(g.Z,{to:"/ui-components/styled-props"},"Styled Props"),".")}]}),o.createElement(x.Z,{first:{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport InputNumber from \'@smart-react-components/ui/Input/InputNumber\'\nimport ProgressBar from \'@smart-react-components/ui/ProgressBar\'\nimport React from \'react\'\n\nexport default () => {\n  const [value, setValue] = React.useState(50)\n  const [value2, setValue2] = React.useState(50)\n\n  return (\n    <>\n      <Div\n        alignItems="center"\n        display="flex"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          setValue={setValue}\n          value={value}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          value={value}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          setValue={setValue2}\n          value={value2}\n          width={50}\n        />\n        <ProgressBar\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          value={value2}\n        />\n      </Div>\n    </>\n  )\n}',output:o.createElement(y,null),title:"Default Value"},second:{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport InputNumber from \'@smart-react-components/ui/Input/InputNumber\'\nimport ProgressBar from \'@smart-react-components/ui/ProgressBar\'\nimport React from \'react\'\n\nexport default () => {\n  const [value, setValue] = React.useState(50)\n  const [value2, setValue2] = React.useState(50)\n\n  return (\n    <>\n      <Div\n        alignItems="center"\n        display="flex"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          setValue={setValue}\n          value={value}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          value={value}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          setValue={setValue2}\n          value={value2}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          suffix=""\n          totalValue={100}\n          value={value2}\n        />\n      </Div>\n    </>\n  )\n}',output:o.createElement(E,null),title:"Total Value"}}),o.createElement(x.Z,{first:{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport InputNumber from \'@smart-react-components/ui/Input/InputNumber\'\nimport ProgressBar from \'@smart-react-components/ui/ProgressBar\'\nimport React from \'react\'\n\nexport default () => {\n  const [primaryValue, setPrimaryValue] = React.useState(50)\n  const [secondaryValue, setSecondaryValue] = React.useState(50)\n  const [successValue, setSuccessValue] = React.useState(50)\n  const [dangerValue, setDangerValue] = React.useState(50)\n  const [warningValue, setWarningValue] = React.useState(50)\n  const [infoValue, setInfoValue] = React.useState(50)\n  const [lightValue, setLightValue] = React.useState(50)\n  const [darkValue, setDarkValue] = React.useState(50)\n\n  return (\n    <>\n      <Div\n        alignItems="center"\n        display="flex"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          setValue={setPrimaryValue}\n          value={primaryValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          value={primaryValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="secondary"\n          setValue={setSecondaryValue}\n          value={secondaryValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          palette="secondary"\n          value={secondaryValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="success"\n          setValue={setSuccessValue}\n          value={successValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          palette="success"\n          value={successValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="danger"\n          setValue={setDangerValue}\n          value={dangerValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          palette="danger"\n          value={dangerValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="warning"\n          setValue={setWarningValue}\n          value={warningValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          palette="warning"\n          value={warningValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="info"\n          setValue={setInfoValue}\n          value={infoValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          palette="info"\n          value={infoValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="light"\n          setValue={setLightValue}\n          value={lightValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          palette="light"\n          value={lightValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="dark"\n          setValue={setDarkValue}\n          value={darkValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          palette="dark"\n          value={darkValue}\n        />\n      </Div>\n    </>\n  )\n}',output:o.createElement(S,null),title:"Palette"},second:{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport InputNumber from \'@smart-react-components/ui/Input/InputNumber\'\nimport ProgressBar from \'@smart-react-components/ui/ProgressBar\'\nimport React from \'react\'\n\nexport default () => {\n  const [primaryValue, setPrimaryValue] = React.useState(50)\n  const [secondaryValue, setSecondaryValue] = React.useState(50)\n  const [successValue, setSuccessValue] = React.useState(50)\n  const [dangerValue, setDangerValue] = React.useState(50)\n  const [warningValue, setWarningValue] = React.useState(50)\n  const [infoValue, setInfoValue] = React.useState(50)\n  const [lightValue, setLightValue] = React.useState(50)\n  const [darkValue, setDarkValue] = React.useState(50)\n\n  return (\n    <>\n      <Div\n        alignItems="center"\n        display="flex"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          setValue={setPrimaryValue}\n          value={primaryValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isFilled\n          value={primaryValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="secondary"\n          setValue={setSecondaryValue}\n          value={secondaryValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isFilled\n          palette="secondary"\n          value={secondaryValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="success"\n          setValue={setSuccessValue}\n          value={successValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isFilled\n          palette="success"\n          value={successValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="danger"\n          setValue={setDangerValue}\n          value={dangerValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isFilled\n          palette="danger"\n          value={dangerValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="warning"\n          setValue={setWarningValue}\n          value={warningValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isFilled\n          palette="warning"\n          value={warningValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="info"\n          setValue={setInfoValue}\n          value={infoValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isFilled\n          palette="info"\n          value={infoValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="light"\n          setValue={setLightValue}\n          value={lightValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isFilled\n          palette="light"\n          value={lightValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="dark"\n          setValue={setDarkValue}\n          value={darkValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isFilled\n          palette="dark"\n          value={darkValue}\n        />\n      </Div>\n    </>\n  )\n}',output:o.createElement(P,null),title:"Filled"}}),o.createElement(x.Z,{first:{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport InputNumber from \'@smart-react-components/ui/Input/InputNumber\'\nimport ProgressBar from \'@smart-react-components/ui/ProgressBar\'\nimport React from \'react\'\n\nexport default () => {\n  const [primaryValue, setPrimaryValue] = React.useState(50)\n  const [secondaryValue, setSecondaryValue] = React.useState(50)\n  const [successValue, setSuccessValue] = React.useState(50)\n  const [dangerValue, setDangerValue] = React.useState(50)\n  const [warningValue, setWarningValue] = React.useState(50)\n  const [infoValue, setInfoValue] = React.useState(50)\n  const [lightValue, setLightValue] = React.useState(50)\n  const [darkValue, setDarkValue] = React.useState(50)\n\n  return (\n    <>\n      <Div\n        alignItems="center"\n        display="flex"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          setValue={setPrimaryValue}\n          value={primaryValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isStriped\n          value={primaryValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="secondary"\n          setValue={setSecondaryValue}\n          value={secondaryValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isStriped\n          palette="secondary"\n          value={secondaryValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="success"\n          setValue={setSuccessValue}\n          value={successValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isStriped\n          palette="success"\n          value={successValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="danger"\n          setValue={setDangerValue}\n          value={dangerValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isStriped\n          palette="danger"\n          value={dangerValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="warning"\n          setValue={setWarningValue}\n          value={warningValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isStriped\n          palette="warning"\n          value={warningValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="info"\n          setValue={setInfoValue}\n          value={infoValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isStriped\n          palette="info"\n          value={infoValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="light"\n          setValue={setLightValue}\n          value={lightValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isStriped\n          palette="light"\n          value={lightValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="dark"\n          setValue={setDarkValue}\n          value={darkValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          isStriped\n          palette="dark"\n          value={darkValue}\n        />\n      </Div>\n    </>\n  )\n}',output:o.createElement(I,null),title:"Striped"},second:{code:'import Div from \'@smart-react-components/core/Element/Div\'\nimport InputNumber from \'@smart-react-components/ui/Input/InputNumber\'\nimport ProgressBar from \'@smart-react-components/ui/ProgressBar\'\nimport React from \'react\'\n\nexport default () => {\n  const [primaryValue, setPrimaryValue] = React.useState(50)\n  const [secondaryValue, setSecondaryValue] = React.useState(50)\n  const [successValue, setSuccessValue] = React.useState(50)\n  const [dangerValue, setDangerValue] = React.useState(50)\n  const [warningValue, setWarningValue] = React.useState(50)\n  const [infoValue, setInfoValue] = React.useState(50)\n  const [lightValue, setLightValue] = React.useState(50)\n  const [darkValue, setDarkValue] = React.useState(50)\n\n  return (\n    <>\n      <Div\n        alignItems="center"\n        display="flex"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          setValue={setPrimaryValue}\n          value={primaryValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          hasStripedAnimation={false}\n          isStriped\n          value={primaryValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="secondary"\n          setValue={setSecondaryValue}\n          value={secondaryValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          hasStripedAnimation={false}\n          isStriped\n          palette="secondary"\n          value={secondaryValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="success"\n          setValue={setSuccessValue}\n          value={successValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          hasStripedAnimation={false}\n          isStriped\n          palette="success"\n          value={successValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="danger"\n          setValue={setDangerValue}\n          value={dangerValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          hasStripedAnimation={false}\n          isStriped\n          palette="danger"\n          value={dangerValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="warning"\n          setValue={setWarningValue}\n          value={warningValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          hasStripedAnimation={false}\n          isStriped\n          palette="warning"\n          value={warningValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="info"\n          setValue={setInfoValue}\n          value={infoValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          hasStripedAnimation={false}\n          isStriped\n          palette="info"\n          value={infoValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="light"\n          setValue={setLightValue}\n          value={lightValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          hasStripedAnimation={false}\n          isStriped\n          palette="light"\n          value={lightValue}\n        />\n      </Div>\n      <Div\n        alignItems="center"\n        display="flex"\n        marginTop="$length.3"\n      >\n        <InputNumber\n          flex="0 0 auto"\n          marginRight="$length.3"\n          palette="dark"\n          setValue={setDarkValue}\n          value={darkValue}\n          width={50}\n        />\n        <ProgressBar\n          displayValue\n          elementProps={{\n            flex: \'1 1 auto\',\n          }}\n          hasStripedAnimation={false}\n          isStriped\n          palette="dark"\n          value={darkValue}\n        />\n      </Div>\n    </>\n  )\n}',output:o.createElement($,null),title:"Striped No Animation"}}),o.createElement("h2",{id:"theme-attributes"},"Theme Attributes"),o.createElement(m.Z,{attrs:[{name:"fontFamily.progressBar",type:"string",description:o.createElement(o.Fragment,null,o.createElement("code",null,"font-family")," value.")},{name:"fontSize.progressBar",type:"string",description:o.createElement(o.Fragment,null,o.createElement("code",null,"font-size")," value.")},{name:"i18n.progressBar.prefix",type:"string",description:o.createElement(o.Fragment,null,"Prefix value of both ",o.createElement("code",null,"value")," and ",o.createElement("code",null,"totalValue"),".")},{name:"i18n.progressBar.suffix",type:"string",description:o.createElement(o.Fragment,null,"Suffix value of both ",o.createElement("code",null,"value")," and ",o.createElement("code",null,"totalValue"),".")},{name:"i18n.progressBar.separator",type:"string",description:o.createElement(o.Fragment,null,"Separator value between ",o.createElement("code",null,"value")," and ",o.createElement("code",null,"totalValue"),". Displayed only when ",o.createElement("code",null,"totalValue")," is given.")}]})),o.createElement(h.Z,{next:{label:"Radio",to:"/ui-components/radio"},prev:{label:"Popover",to:"/ui-components/popover"}})),o.createElement(c.Z,{list:[{label:"Popover",id:"popover"},{label:"Theme Attributes",id:"theme-attributes"}]})))}}]);