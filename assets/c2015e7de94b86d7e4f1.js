"use strict";(self.webpackChunksmart_react_components_page=self.webpackChunksmart_react_components_page||[]).push([[154],{26154:(e,t,r)=>{r.r(t),r.d(t,{default:()=>c});var n=r(67294),o=r(4074),l=r(44583),s=r(94086),a=r(16127),m=r(23235),d=r(69229),i=r(666);const c=()=>((0,i.Z)({title:"Server Side Rendering"}),n.createElement(d.Z,null,n.createElement(m.Z,null,n.createElement("div",null,n.createElement("h1",{id:"server-side-rendering"},"Server Side Rendering"),n.createElement("p",null,"All the SRC Styled and React components are compatible with NodeJS. You can provide server side rendering with SRC."),n.createElement("h2",{id:"usage-on-server"},"Usage on Server"),n.createElement("p",null,"An example of how you provide server side rendering with ExpressJS. SRC doesn't use any ExpressJS dependencies so you can use another NodeJS framework to provide server side rendering."),n.createElement(o.Z,{code:"import { callGetMethods, loadModulesOnServer } from '@smart-react-components/router'\nimport ServerRouter from '@smart-react-components/router/ServerRouter'\nimport express from 'express'\nimport React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { ServerStyleSheet, StyleSheetManager, ThemeProvider } from 'styled-components'\nimport App from './components/App'\nimport routes from './routes'\nimport createTheme from './theme'\n\nlet modules = {}\n\nconst app = express()\n\napp.get('*', async (req, res) => {\n  const sheet = new ServerStyleSheet()\n  const theme = createTheme()\n  theme.$.vars.isMobile = !!(/mobile/i.test(req.headers['user-agent']))\n\n  await callGetMethods(req.url, routes, modules, {})\n\n  const html = renderToString(\n    <ServerRouter modules={modules} routes={routes} url={req.url}>\n      <StyleSheetManager sheet={sheet.instance}>\n        <ThemeProvider theme={theme}>\n          <App />\n        </ThemeProvider>\n      </StyleSheetManager>\n    </ServerRouter>\n  )\n\n  const style = sheet.getStyleTags()\n\n  res.send(\n`<!DOCTYPE html>\n<html>\n  <head>\n    ${style}\n  </head>\n  <body>\n    <div id=\"app\">${html}</div>\n    <script src=\"main.js\"><\/script>\n  </body>\n</html>`\n  )\n})\n\nloadModulesOnServer(routes)\n.then(resolvedModules => {\n  modules = resolvedModules\n\n  app.listen(3000)\n})\n.catch(err => console.error(err))",language:"js"}),n.createElement("p",null,"SRC provides only two methods to complete all SSR processs: ",n.createElement("code",null,"loadModulesOnServer")," and ",n.createElement("code",null,"callGetMethods"),"."),n.createElement("p",null,n.createElement("code",null,"loadModulesOnServer")," accepts the same ",n.createElement("code",null,"routes")," array given to ",n.createElement(l.Z,{to:"/router#server-router"},"Server Router")," and ",n.createElement(l.Z,{to:"/router#client-router"},"Client Router"),". It preloads all modules at once and use them when needed."),n.createElement("p",null,n.createElement("code",null,"callGetMethods")," invokes all the ",n.createElement(l.Z,{to:"/api#get"},"get")," methods of the modules whose pathes are matched to the URL. It accepts four params; the first one is the URL of the request, the second one is the same ",n.createElement("code",null,"routes")," array given to ",n.createElement(l.Z,{to:"/router#server-router"},"Server Router")," and ",n.createElement(l.Z,{to:"/router#client-router"},"Client Router"),", the third one is the loaded modules by ",n.createElement("code",null,"loadModulesOnServer"),", and the last one is the addional params sent to the ",n.createElement(l.Z,{to:"/api#get"},"get")," method."),n.createElement("p",null,"All the SRC components are responsive, therefore some of the SRC components need to know if it's the mobile device that user browses. SRC can detect it on the client-side, but on server-side, you need to set it manually, using theme isMobile property."),n.createElement("h2",{id:"usage-on-client"},"Usage on Client"),n.createElement(o.Z,{code:"import { loadModulesOnClient } from '@smart-react-components/router'\nimport ClientRouter from '@smart-react-components/router/ClientRouter'\nimport React from 'react'\nimport { hydrateRoot } from 'react-dom/client'\nimport { ThemeProvider } from 'styled-components'\nimport App from './components/App'\nimport routes from './routes'\nimport createStore from './redux'\nimport createTheme from './theme'\n\nloadModulesOnClient(routes)\n.then(() => {\n  const theme = createTheme()\n\n  hydrateRoot(\n    document.getElementById('app'),\n    <ClientRouter routes={routes}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </ClientRouter>,\n  )\n})",language:"js"}),n.createElement("p",null,"SRC provides a single method on the client side to fully benefit the SSR process. ",n.createElement("code",null,"loadModulesOnClient")," loads the needed module before starting the React not to interrupt the React.")),n.createElement(a.Z,{next:{label:"API",to:"/api"},prev:{label:"Router",to:"/router"}})),n.createElement(s.Z,{list:[{label:"Server Side Rendering",id:"server-side-rendering"},{label:"Usage on Server",id:"usage-on-server"},{label:"Usage on Client",id:"usage-on-client"}]})))}}]);