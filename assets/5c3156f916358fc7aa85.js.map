{"version":3,"file":"5c3156f916358fc7aa85.js","mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gCAAgC,0DAAmB;AACnD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,kBAAkB;AAClB,gBAAgB;AAChB;AACA,0BAA0B,uBAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gCAAgC,0DAAmB;AACnD;AACA,uBAAuB;AACvB,gBAAgB,0DAAmB,CAAC,gEAAY,IAAI;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,sBAAsB;AAC7C,QAAQ;AACR,gCAAgC,OAAO,SAAS,uBAAuB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gCAAgC,0DAAmB;AACnD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,sBAAsB;AAC7C,QAAQ;AACR,8CAA8C,OAAO,SAAS,uBAAuB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gCAAgC,0DAAmB;AACnD;AACA,uBAAuB;AACvB,gBAAgB,0DAAmB,CAAC,mEAAe,IAAI;AACvD;AACA;AACA;AACA,yCAAyC,0DAAmB,CAAC,uDAAc;AAC3E,gCAAgC,0DAAmB;AACnD;AACA,gCAAgC,0DAAmB;AACnD;AACA,gCAAgC,0DAAmB;AACnD;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yCAAyC,0DAAmB,CAAC,uDAAc;AAC3E,gCAAgC,0DAAmB;AACnD;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yCAAyC,0DAAmB,CAAC,uDAAc;AAC3E,gCAAgC,0DAAmB;AACnD;AACA,yBAAyB;AACzB,uBAAuB;AACvB,YAAY,0DAAmB,CAAC,mEAAc,IAAI;AAClD;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mBAAmB;AACnB,QAAQ,0DAAmB,CAAC,wDAAG,IAAI;AACnC,kBAAkB,iCAAiC;AACnD,kBAAkB,mDAAmD;AACrE,eAAe;AACf;AACA,iEAAe,OAAO,EAAC","sources":["webpack://smart-react-components-page/./src/containers/Overlay.tsx"],"sourcesContent":["import Div from '@smart-react-components/core/Element/Div';\nimport H1 from '@smart-react-components/core/Element/H1';\nimport CSSTransition from '@smart-react-components/transition/CSSTransition';\nimport Button from '@smart-react-components/ui/Button';\nimport OverlayElement from '@smart-react-components/ui/Overlay';\nimport React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport AttributesTable from '../components/AttributesTable';\nimport ComponentType from '../components/ComponentType';\nimport LabelLink from '../components/LabelLink';\nimport MultiExample from '../components/MultiExample';\nimport Nav from '../components/Nav';\nimport PropsTable from '../components/PropsTable';\nimport SuggestedPages from '../components/SuggestedPages';\nimport Blockquote from '../elements/Blockquote';\nimport Content from '../elements/Content';\nimport Page from '../elements/Page';\nimport usePage from '../hooks/usePage';\nconst StandardOverlayExample = () => {\n    const [status, setStatus] = React.useState(false);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Button, { onClick: () => setStatus(true) }, \"Standard Overlay\"),\n        status && (React.createElement(OverlayElement, { onClick: () => setStatus(false) },\n            React.createElement(Div, { alignSelf: \"flex-start\", background: \"$color.dynamic.background\", borderRadius: \"0.4rem\", boxShadow: \"0 0 15px 0 rgba(0, 0, 0, .2)\", color: \"$color.dynamic.bodyFont\", display: \"flex\", fill: \"$color.black\", flex: \"1 1 auto\", justifyContent: \"space-between\", maxWidth: 500, padding: \"1rem\" },\n                React.createElement(H1, { marginBottom: 0 }, \"Standard Overlay\"))))));\n};\nconst GlobalStyle = createGlobalStyle `\n  .fade-overlay-show {\n    opacity: 0;\n  }\n\n  .fade-overlay-show-active {\n    opacity: 1;\n    transition: opacity 300ms ease-in;\n  }\n\n  .fade-overlay-hide {\n    opacity: 1;\n  }\n\n  .fade-overlay-hide-active {\n    opacity: 0;\n    transition: opacity 300ms ease-in;\n  }\n`;\nconst FadeOverlayExample = () => {\n    const [status, setStatus] = React.useState(false);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(GlobalStyle, null),\n        React.createElement(Button, { onClick: () => setStatus(true) }, \"Fade Overlay\"),\n        React.createElement(CSSTransition, { className: \"fade-overlay\", duration: 300, status: status },\n            React.createElement(OverlayElement, { onClick: () => setStatus(false) },\n                React.createElement(Div, { alignSelf: \"flex-start\", background: \"$color.dynamic.background\", borderRadius: \"0.4rem\", boxShadow: \"0 0 15px 0 rgba(0, 0, 0, .2)\", color: \"$color.dynamic.bodyFont\", display: \"flex\", fill: \"$color.black\", flex: \"1 1 auto\", justifyContent: \"space-between\", maxWidth: 500, padding: \"1rem\" },\n                    React.createElement(H1, { marginBottom: 0 }, \"Fade Overlay\"))))));\n};\nconst TransparentOverlayExample = () => {\n    const [status, setStatus] = React.useState(false);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Button, { onClick: () => setStatus(true) }, \"Transparent Overlay\"),\n        status && (React.createElement(OverlayElement, { hasBackground: false, onClick: () => setStatus(false) },\n            React.createElement(Div, { alignSelf: \"flex-start\", background: \"$color.dynamic.background\", borderRadius: \"0.4rem\", boxShadow: \"0 0 15px 0 rgba(0, 0, 0, .2)\", color: \"$color.dynamic.bodyFont\", display: \"flex\", fill: \"$color.black\", flex: \"1 1 auto\", justifyContent: \"space-between\", maxWidth: 500, padding: \"1rem\" },\n                React.createElement(H1, { marginBottom: 0 }, \"Transparent Overlay\"))))));\n};\nconst BlurOverlayExample = () => {\n    const [status, setStatus] = React.useState(false);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Button, { onClick: () => setStatus(true) }, \"Blur Overlay\"),\n        status && (React.createElement(OverlayElement, { hasBlurEffect: true, hasBackground: false, onClick: () => setStatus(false) },\n            React.createElement(Div, { alignSelf: \"flex-start\", background: \"$color.dynamic.background\", borderRadius: \"0.4rem\", boxShadow: \"0 0 15px 0 rgba(0, 0, 0, .2)\", color: \"$color.dynamic.bodyFont\", display: \"flex\", fill: \"$color.black\", flex: \"1 1 auto\", justifyContent: \"space-between\", maxWidth: 500, padding: \"1rem\" },\n                React.createElement(H1, { marginBottom: 0 }, \"Blur Overlay\"))))));\n};\nconst Overlay = () => {\n    usePage({ title: 'Overlay' });\n    return (React.createElement(Page, null,\n        React.createElement(Content, null,\n            React.createElement(\"div\", null,\n                React.createElement(\"h1\", { id: \"overlay\" }, \"Overlay\"),\n                React.createElement(ComponentType, null),\n                React.createElement(\"p\", null,\n                    \"Overlay effect which prevents \",\n                    React.createElement(\"code\", null, \"window\"),\n                    \" from scrolling.\"),\n                React.createElement(PropsTable, { props: [\n                        {\n                            name: 'children',\n                            type: 'JSX.Element',\n                            isRequired: true,\n                            description: 'Overlay content.',\n                        },\n                        {\n                            name: 'hasBackground',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                \"Sets background to \",\n                                React.createElement(\"code\", null, \"color.overlay.background\"),\n                                \".\"),\n                        },\n                        {\n                            name: 'hasBlurEffect',\n                            type: 'boolean',\n                            defaultValue: 'false',\n                            description: React.createElement(React.Fragment, null,\n                                \"Applies blur effect to other elements in \",\n                                React.createElement(\"code\", null, \"body\"),\n                                \" to emphasize the overlay element and its children. \",\n                                React.createElement(\"code\", null, \"isInBody\"),\n                                \" automatically is set to \",\n                                React.createElement(\"code\", null, \"true\"),\n                                \" when \",\n                                React.createElement(\"code\", null, \"hasBlurEffect\"),\n                                \" is \",\n                                React.createElement(\"code\", null, \"true\"),\n                                \".\"),\n                        },\n                        {\n                            name: 'isInBody',\n                            type: 'boolean',\n                            defaultValue: 'true',\n                            description: React.createElement(React.Fragment, null,\n                                \"Overlay is rendered in \",\n                                React.createElement(\"code\", null, \"body\"),\n                                \" instead of the component tree.\")\n                        },\n                        {\n                            name: 'breakpoint',\n                            type: React.createElement(LabelLink, { to: \"/api#breakpoint\" }, \"Breakpoint\"),\n                            description: 'When given, displays the overlay when only the window\\'s width is equal or smaller than the given breakpoint width.',\n                        },\n                        {\n                            name: 'elementProps',\n                            type: React.createElement(LabelLink, { to: \"/api#jsx-element-props\" }, \"JSXElementProps\"),\n                            description: React.createElement(React.Fragment, null,\n                                \"Overlay element \",\n                                React.createElement(LabelLink, { to: \"/styled-props\" }, \"Styled Props\"),\n                                \".\"),\n                        },\n                    ] }),\n                React.createElement(Blockquote, null,\n                    \"Overlay provides \",\n                    React.createElement(LabelLink, { to: \"/element-props#click-events\" }, \"Click Events\"),\n                    \" for the overlay element.\"),\n                React.createElement(Blockquote, null,\n                    \"Overlay provides \",\n                    React.createElement(\"code\", null, \"forwardRef\"),\n                    \" to the overlay element.\"),\n                React.createElement(MultiExample, { first: {\n                        code: `import Div from '@smart-react-components/core/Element/Div'\nimport H1 from '@smart-react-components/core/Element/H1'\nimport Button from '@smart-react-components/ui/Button'\nimport Overlay from '@smart-react-components/ui/Overlay'\nimport React from 'react'\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  return (\n    <>\n      <Button onClick={() => setStatus(true)}>Standard Overlay</Button>\n      { status && (\n        <Overlay onClick={() => setStatus(false)}>\n          <Div\n            alignSelf=\"flex-start\"\n            background=\"$color.dynamic.background\"\n            borderRadius=\"0.4rem\"\n            boxShadow=\"0 0 15px 0 rgba(0, 0, 0, .2)\"\n            color=\"$color.dynamic.bodyFont\"\n            display=\"flex\"\n            fill=\"$color.black\"\n            flex=\"1 1 auto\"\n            justifyContent=\"space-between\"\n            maxWidth={500}\n            padding=\"1rem\"\n          >\n            <H1 marginBottom={0}>Standard Overlay</H1>\n          </Div>\n        </Overlay>\n      ) }\n    </>\n  )\n}`,\n                        output: React.createElement(StandardOverlayExample, null),\n                        title: 'Standard Overlay',\n                    }, second: {\n                        code: `import Div from '@smart-react-components/core/Element/Div'\nimport H1 from '@smart-react-components/core/Element/H1'\nimport CSSTransition from '@smart-react-components/transition/CSSTransition'\nimport Button from '@smart-react-components/ui/Button'\nimport Overlay from '@smart-react-components/ui/Overlay'\nimport React from 'react'\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle\\`\n  .fade-overlay-show {\n    opacity: 0;\n  }\n\n  .fade-overlay-show-active {\n    opacity: 1;\n    transition: opacity 300ms ease-in;\n  }\n\n  .fade-overlay-hide {\n    opacity: 1;\n  }\n\n  .fade-overlay-hide-active {\n    opacity: 0;\n    transition: opacity 300ms ease-in;\n  }\n\\`\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  return (\n    <>\n      <GlobalStyle />\n      <Button onClick={() => setStatus(true)}>Fade Overlay</Button>\n      <CSSTransition\n        className=\"fade-overlay\"\n        duration={300}\n        status={status}\n      >\n        <Overlay onClick={() => setStatus(false)}>\n          <Div\n            alignSelf=\"flex-start\"\n            background=\"$color.dynamic.background\"\n            borderRadius=\"0.4rem\"\n            boxShadow=\"0 0 15px 0 rgba(0, 0, 0, .2)\"\n            color=\"$color.dynamic.bodyFont\"\n            display=\"flex\"\n            fill=\"$color.black\"\n            flex=\"1 1 auto\"\n            justifyContent=\"space-between\"\n            maxWidth={500}\n            padding=\"1rem\"\n          >\n            <H1 marginBottom={0}>Fade Overlay</H1>\n          </Div>\n        </Overlay>\n      </CSSTransition>\n    </>\n  )\n}`,\n                        output: React.createElement(FadeOverlayExample, null),\n                        title: 'Fade Overlay'\n                    } }),\n                React.createElement(MultiExample, { first: {\n                        code: `import Div from '@smart-react-components/core/Element/Div'\nimport H1 from '@smart-react-components/core/Element/H1'\nimport Button from '@smart-react-components/ui/Button'\nimport Overlay from '@smart-react-components/ui/Overlay'\nimport React from 'react'\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  return (\n    <>\n      <Button onClick={() => setStatus(true)}>Transparent Overlay</Button>\n      { status && (\n        <Overlay hasBackground={false} onClick={() => setStatus(false)}>\n          <Div\n            alignSelf=\"flex-start\"\n            background=\"$color.dynamic.background\"\n            borderRadius=\"0.4rem\"\n            boxShadow=\"0 0 15px 0 rgba(0, 0, 0, .2)\"\n            color=\"$color.dynamic.bodyFont\"\n            display=\"flex\"\n            fill=\"$color.black\"\n            flex=\"1 1 auto\"\n            justifyContent=\"space-between\"\n            maxWidth={500}\n            padding=\"1rem\"\n          >\n            <H1 marginBottom={0}>Transparent Overlay</H1>\n          </Div>\n        </Overlay>\n      ) }\n    </>\n  )\n}`,\n                        output: React.createElement(TransparentOverlayExample, null),\n                        title: 'Transparent Overlay',\n                    }, second: {\n                        code: `import Div from '@smart-react-components/core/Element/Div'\nimport H1 from '@smart-react-components/core/Element/H1'\nimport Button from '@smart-react-components/ui/Button'\nimport Overlay from '@smart-react-components/ui/Overlay'\nimport React from 'react'\n\nexport default () => {\n  const [status, setStatus] = React.useState(false)\n\n  return (\n    <>\n      <Button onClick={() => setStatus(true)}>Blur Overlay</Button>\n      { status && (\n        <Overlay hasBlurEffect hasBackground={false} onClick={() => setStatus(false)}>\n          <Div\n            alignSelf=\"flex-start\"\n            background=\"$color.dynamic.background\"\n            borderRadius=\"0.4rem\"\n            boxShadow=\"0 0 15px 0 rgba(0, 0, 0, .2)\"\n            color=\"$color.dynamic.bodyFont\"\n            display=\"flex\"\n            fill=\"$color.black\"\n            flex=\"1 1 auto\"\n            justifyContent=\"space-between\"\n            maxWidth={500}\n            padding=\"1rem\"\n          >\n            <H1 marginBottom={0}>Blur Overlay</H1>\n          </Div>\n        </Overlay>\n      ) }\n    </>\n  )\n}`,\n                        output: React.createElement(BlurOverlayExample, null),\n                        title: 'Blur Overlay',\n                    } }),\n                React.createElement(AttributesTable, { attrs: [\n                        {\n                            name: 'color.overlay.background',\n                            type: 'string',\n                            description: React.createElement(React.Fragment, null,\n                                React.createElement(\"code\", null, \"background\"),\n                                \" value when \",\n                                React.createElement(\"code\", null, \"hasBackground\"),\n                                \" is \",\n                                React.createElement(\"code\", null, \"true\"),\n                                \".\"),\n                        },\n                        {\n                            name: 'length.overlay.space',\n                            type: 'string',\n                            description: React.createElement(React.Fragment, null,\n                                React.createElement(\"code\", null, \"padding\"),\n                                \" value.\")\n                        },\n                        {\n                            name: 'zIndex.overlay',\n                            type: 'number',\n                            description: React.createElement(React.Fragment, null,\n                                React.createElement(\"code\", null, \"z-index\"),\n                                \" value.\")\n                        },\n                    ] })),\n            React.createElement(SuggestedPages, { next: {\n                    label: 'Pagination',\n                    to: '/ui-components/pagination',\n                }, prev: {\n                    label: 'Modal',\n                    to: '/ui-components/modal',\n                } })),\n        React.createElement(Nav, { list: [\n                { label: 'Overlay', id: 'overlay' },\n                { label: 'Theme Attributes', id: 'theme-attributes' },\n            ] })));\n};\nexport default Overlay;\n"],"names":[],"sourceRoot":""}